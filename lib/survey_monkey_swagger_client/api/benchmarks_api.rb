=begin
#SurveyMonkey API V3

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.27
=end

module SurveyMonkeySwaggerClient
  class BenchmarksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get a list of benchmark bundles
    # Get a list of benchmark bundles that you have access to
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_a_list_of_benchmark_bundles(opts = {})
      get_a_list_of_benchmark_bundles_with_http_info(opts)
      nil
    end

    # Get a list of benchmark bundles
    # Get a list of benchmark bundles that you have access to
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_a_list_of_benchmark_bundles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BenchmarksApi.get_a_list_of_benchmark_bundles ...'
      end
      # resource path
      local_var_path = '/v3/benchmark_bundles'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BenchmarksApi#get_a_list_of_benchmark_bundles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of benchmark bundles details
    # Returns the questions and details included in a given bundle
    # @param bundle_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_a_list_of_benchmark_bundles_details(bundle_id, opts = {})
      get_a_list_of_benchmark_bundles_details_with_http_info(bundle_id, opts)
      nil
    end

    # Get a list of benchmark bundles details
    # Returns the questions and details included in a given bundle
    # @param bundle_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_a_list_of_benchmark_bundles_details_with_http_info(bundle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BenchmarksApi.get_a_list_of_benchmark_bundles_details ...'
      end
      # verify the required parameter 'bundle_id' is set
      if @api_client.config.client_side_validation && bundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'bundle_id' when calling BenchmarksApi.get_a_list_of_benchmark_bundles_details"
      end
      # resource path
      local_var_path = '/v3/benchmark_bundles/{BUNDLE_ID}'.sub('{' + 'BUNDLE_ID' + '}', bundle_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BenchmarksApi#get_a_list_of_benchmark_bundles_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get bundle benchmark
    # Returns the benchmark for the given bundle
    # @param bundle_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_bundle_benchmark(bundle_id, opts = {})
      get_bundle_benchmark_with_http_info(bundle_id, opts)
      nil
    end

    # Get bundle benchmark
    # Returns the benchmark for the given bundle
    # @param bundle_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_bundle_benchmark_with_http_info(bundle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BenchmarksApi.get_bundle_benchmark ...'
      end
      # verify the required parameter 'bundle_id' is set
      if @api_client.config.client_side_validation && bundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'bundle_id' when calling BenchmarksApi.get_bundle_benchmark"
      end
      # resource path
      local_var_path = '/v3/benchmark_bundles/{BUNDLE_ID}/analyze'.sub('{' + 'BUNDLE_ID' + '}', bundle_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BenchmarksApi#get_bundle_benchmark\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get question benchmark
    # Get question benchmark
    # @param page_id
    # @param question_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_question_benchmark(page_id, question_id, opts = {})
      get_question_benchmark_with_http_info(page_id, question_id, opts)
      nil
    end

    # Get question benchmark
    # Get question benchmark
    # @param page_id
    # @param question_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_question_benchmark_with_http_info(page_id, question_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BenchmarksApi.get_question_benchmark ...'
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling BenchmarksApi.get_question_benchmark"
      end
      # verify the required parameter 'question_id' is set
      if @api_client.config.client_side_validation && question_id.nil?
        fail ArgumentError, "Missing the required parameter 'question_id' when calling BenchmarksApi.get_question_benchmark"
      end
      # resource path
      local_var_path = '/v3/surveys/310099766/pages/{PAGE_ID}/questions/{QUESTION_ID}/benchmark'.sub('{' + 'PAGE_ID' + '}', page_id.to_s).sub('{' + 'QUESTION_ID' + '}', question_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BenchmarksApi#get_question_benchmark\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
