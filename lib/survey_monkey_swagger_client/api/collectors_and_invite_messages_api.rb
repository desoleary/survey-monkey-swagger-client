=begin
#SurveyMonkey API V3

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.27
=end

module SurveyMonkeySwaggerClient
  class CollectorsAndInviteMessagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add recipient to a message
    # Add a new recipient to a specified message
    # @param collector_id
    # @param message_id
    # @param [Hash] opts the optional parameters
    # @option opts [MESSAGEIDRecipientsBody] :body
    # @return [nil]
    def add_recipient_to_a_message(collector_id, message_id, opts = {})
      add_recipient_to_a_message_with_http_info(collector_id, message_id, opts)
      nil
    end

    # Add recipient to a message
    # Add a new recipient to a specified message
    # @param collector_id
    # @param message_id
    # @param [Hash] opts the optional parameters
    # @option opts [MESSAGEIDRecipientsBody] :body
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_recipient_to_a_message_with_http_info(collector_id, message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectorsAndInviteMessagesApi.add_recipient_to_a_message ...'
      end
      # verify the required parameter 'collector_id' is set
      if @api_client.config.client_side_validation && collector_id.nil?
        fail ArgumentError, "Missing the required parameter 'collector_id' when calling CollectorsAndInviteMessagesApi.add_recipient_to_a_message"
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling CollectorsAndInviteMessagesApi.add_recipient_to_a_message"
      end
      # resource path
      local_var_path = '/v3/collectors/{COLLECTOR_ID}/messages/{MESSAGE_ID}/recipients'.sub('{' + 'COLLECTOR_ID' + '}', collector_id.to_s).sub('{' + 'MESSAGE_ID' + '}', message_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectorsAndInviteMessagesApi#add_recipient_to_a_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a collector message
    # Create a collector message
    # @param collector_id
    # @param [Hash] opts the optional parameters
    # @option opts [COLLECTORIDMessagesBody] :body
    # @return [nil]
    def create_a_collector_message(collector_id, opts = {})
      create_a_collector_message_with_http_info(collector_id, opts)
      nil
    end

    # Create a collector message
    # Create a collector message
    # @param collector_id
    # @param [Hash] opts the optional parameters
    # @option opts [COLLECTORIDMessagesBody] :body
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_a_collector_message_with_http_info(collector_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectorsAndInviteMessagesApi.create_a_collector_message ...'
      end
      # verify the required parameter 'collector_id' is set
      if @api_client.config.client_side_validation && collector_id.nil?
        fail ArgumentError, "Missing the required parameter 'collector_id' when calling CollectorsAndInviteMessagesApi.create_a_collector_message"
      end
      # resource path
      local_var_path = '/v3/collectors/{COLLECTOR_ID}/messages'.sub('{' + 'COLLECTOR_ID' + '}', collector_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectorsAndInviteMessagesApi#create_a_collector_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a survey collector
    # Creates a webline or email collector for a given survey
    # @param [Hash] opts the optional parameters
    # @option opts [Model310099766CollectorsBody] :body
    # @return [nil]
    def create_a_survey_collector(opts = {})
      create_a_survey_collector_with_http_info(opts)
      nil
    end

    # Create a survey collector
    # Creates a webline or email collector for a given survey
    # @param [Hash] opts the optional parameters
    # @option opts [Model310099766CollectorsBody] :body
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_a_survey_collector_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectorsAndInviteMessagesApi.create_a_survey_collector ...'
      end
      # resource path
      local_var_path = '/v3/surveys/310099766/collectors'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectorsAndInviteMessagesApi#create_a_survey_collector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create multiple recipients
    # Create multiple recipients
    # @param collector_id
    # @param message_id
    # @param [Hash] opts the optional parameters
    # @option opts [RecipientsBulkBody] :body
    # @return [nil]
    def create_multiple_recipients(collector_id, message_id, opts = {})
      create_multiple_recipients_with_http_info(collector_id, message_id, opts)
      nil
    end

    # Create multiple recipients
    # Create multiple recipients
    # @param collector_id
    # @param message_id
    # @param [Hash] opts the optional parameters
    # @option opts [RecipientsBulkBody] :body
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_multiple_recipients_with_http_info(collector_id, message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectorsAndInviteMessagesApi.create_multiple_recipients ...'
      end
      # verify the required parameter 'collector_id' is set
      if @api_client.config.client_side_validation && collector_id.nil?
        fail ArgumentError, "Missing the required parameter 'collector_id' when calling CollectorsAndInviteMessagesApi.create_multiple_recipients"
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling CollectorsAndInviteMessagesApi.create_multiple_recipients"
      end
      # resource path
      local_var_path = '/v3/collectors/{COLLECTOR_ID}/messages/{MESSAGE_ID}/recipients/bulk'.sub('{' + 'COLLECTOR_ID' + '}', collector_id.to_s).sub('{' + 'MESSAGE_ID' + '}', message_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectorsAndInviteMessagesApi#create_multiple_recipients\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a collector
    # Delete a collector
    # @param collector_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_a_collector(collector_id, opts = {})
      delete_a_collector_with_http_info(collector_id, opts)
      nil
    end

    # Delete a collector
    # Delete a collector
    # @param collector_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_a_collector_with_http_info(collector_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectorsAndInviteMessagesApi.delete_a_collector ...'
      end
      # verify the required parameter 'collector_id' is set
      if @api_client.config.client_side_validation && collector_id.nil?
        fail ArgumentError, "Missing the required parameter 'collector_id' when calling CollectorsAndInviteMessagesApi.delete_a_collector"
      end
      # resource path
      local_var_path = '/v3/collectors/{COLLECTOR_ID}'.sub('{' + 'COLLECTOR_ID' + '}', collector_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectorsAndInviteMessagesApi#delete_a_collector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a message
    # Delete a collector message
    # @param collector_id
    # @param message_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_a_message(collector_id, message_id, opts = {})
      delete_a_message_with_http_info(collector_id, message_id, opts)
      nil
    end

    # Delete a message
    # Delete a collector message
    # @param collector_id
    # @param message_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_a_message_with_http_info(collector_id, message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectorsAndInviteMessagesApi.delete_a_message ...'
      end
      # verify the required parameter 'collector_id' is set
      if @api_client.config.client_side_validation && collector_id.nil?
        fail ArgumentError, "Missing the required parameter 'collector_id' when calling CollectorsAndInviteMessagesApi.delete_a_message"
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling CollectorsAndInviteMessagesApi.delete_a_message"
      end
      # resource path
      local_var_path = '/v3/collectors/{COLLECTOR_ID}/messages/{MESSAGE_ID}/'.sub('{' + 'COLLECTOR_ID' + '}', collector_id.to_s).sub('{' + 'MESSAGE_ID' + '}', message_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectorsAndInviteMessagesApi#delete_a_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a recipient
    # Delete a recipient by id
    # @param collector_id
    # @param recipient_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_a_recipient(collector_id, recipient_id, opts = {})
      delete_a_recipient_with_http_info(collector_id, recipient_id, opts)
      nil
    end

    # Delete a recipient
    # Delete a recipient by id
    # @param collector_id
    # @param recipient_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_a_recipient_with_http_info(collector_id, recipient_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectorsAndInviteMessagesApi.delete_a_recipient ...'
      end
      # verify the required parameter 'collector_id' is set
      if @api_client.config.client_side_validation && collector_id.nil?
        fail ArgumentError, "Missing the required parameter 'collector_id' when calling CollectorsAndInviteMessagesApi.delete_a_recipient"
      end
      # verify the required parameter 'recipient_id' is set
      if @api_client.config.client_side_validation && recipient_id.nil?
        fail ArgumentError, "Missing the required parameter 'recipient_id' when calling CollectorsAndInviteMessagesApi.delete_a_recipient"
      end
      # resource path
      local_var_path = '/v3/collectors/{COLLECTOR_ID}/recipients/{RECIPIENT_ID}'.sub('{' + 'COLLECTOR_ID' + '}', collector_id.to_s).sub('{' + 'RECIPIENT_ID' + '}', recipient_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectorsAndInviteMessagesApi#delete_a_recipient\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a collector by id
    # Get a collector by id
    # @param collector_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_a_collector_by_id(collector_id, opts = {})
      get_a_collector_by_id_with_http_info(collector_id, opts)
      nil
    end

    # Get a collector by id
    # Get a collector by id
    # @param collector_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_a_collector_by_id_with_http_info(collector_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectorsAndInviteMessagesApi.get_a_collector_by_id ...'
      end
      # verify the required parameter 'collector_id' is set
      if @api_client.config.client_side_validation && collector_id.nil?
        fail ArgumentError, "Missing the required parameter 'collector_id' when calling CollectorsAndInviteMessagesApi.get_a_collector_by_id"
      end
      # resource path
      local_var_path = '/v3/collectors/{COLLECTOR_ID}'.sub('{' + 'COLLECTOR_ID' + '}', collector_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectorsAndInviteMessagesApi#get_a_collector_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of recipients
    # Get a list of recipients
    # @param collector_id
    # @param message_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_a_list_of_recipients(collector_id, message_id, opts = {})
      get_a_list_of_recipients_with_http_info(collector_id, message_id, opts)
      nil
    end

    # Get a list of recipients
    # Get a list of recipients
    # @param collector_id
    # @param message_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_a_list_of_recipients_with_http_info(collector_id, message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectorsAndInviteMessagesApi.get_a_list_of_recipients ...'
      end
      # verify the required parameter 'collector_id' is set
      if @api_client.config.client_side_validation && collector_id.nil?
        fail ArgumentError, "Missing the required parameter 'collector_id' when calling CollectorsAndInviteMessagesApi.get_a_list_of_recipients"
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling CollectorsAndInviteMessagesApi.get_a_list_of_recipients"
      end
      # resource path
      local_var_path = '/v3/collectors/{COLLECTOR_ID}/messages/{MESSAGE_ID}/recipients'.sub('{' + 'COLLECTOR_ID' + '}', collector_id.to_s).sub('{' + 'MESSAGE_ID' + '}', message_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectorsAndInviteMessagesApi#get_a_list_of_recipients\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a message by id
    # Get a collector message by id
    # @param collector_id
    # @param message_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_a_message_by_id(collector_id, message_id, opts = {})
      get_a_message_by_id_with_http_info(collector_id, message_id, opts)
      nil
    end

    # Get a message by id
    # Get a collector message by id
    # @param collector_id
    # @param message_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_a_message_by_id_with_http_info(collector_id, message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectorsAndInviteMessagesApi.get_a_message_by_id ...'
      end
      # verify the required parameter 'collector_id' is set
      if @api_client.config.client_side_validation && collector_id.nil?
        fail ArgumentError, "Missing the required parameter 'collector_id' when calling CollectorsAndInviteMessagesApi.get_a_message_by_id"
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling CollectorsAndInviteMessagesApi.get_a_message_by_id"
      end
      # resource path
      local_var_path = '/v3/collectors/{COLLECTOR_ID}/messages/{MESSAGE_ID}'.sub('{' + 'COLLECTOR_ID' + '}', collector_id.to_s).sub('{' + 'MESSAGE_ID' + '}', message_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectorsAndInviteMessagesApi#get_a_message_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a recipient
    # Get a recipient by id
    # @param collector_id
    # @param recipient_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_a_recipient(collector_id, recipient_id, opts = {})
      get_a_recipient_with_http_info(collector_id, recipient_id, opts)
      nil
    end

    # Get a recipient
    # Get a recipient by id
    # @param collector_id
    # @param recipient_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_a_recipient_with_http_info(collector_id, recipient_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectorsAndInviteMessagesApi.get_a_recipient ...'
      end
      # verify the required parameter 'collector_id' is set
      if @api_client.config.client_side_validation && collector_id.nil?
        fail ArgumentError, "Missing the required parameter 'collector_id' when calling CollectorsAndInviteMessagesApi.get_a_recipient"
      end
      # verify the required parameter 'recipient_id' is set
      if @api_client.config.client_side_validation && recipient_id.nil?
        fail ArgumentError, "Missing the required parameter 'recipient_id' when calling CollectorsAndInviteMessagesApi.get_a_recipient"
      end
      # resource path
      local_var_path = '/v3/collectors/{COLLECTOR_ID}/recipients/{RECIPIENT_ID}'.sub('{' + 'COLLECTOR_ID' + '}', collector_id.to_s).sub('{' + 'RECIPIENT_ID' + '}', recipient_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectorsAndInviteMessagesApi#get_a_recipient\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get collector messages
    # Get collector messages
    # @param collector_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_collector_messages(collector_id, opts = {})
      get_collector_messages_with_http_info(collector_id, opts)
      nil
    end

    # Get collector messages
    # Get collector messages
    # @param collector_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_collector_messages_with_http_info(collector_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectorsAndInviteMessagesApi.get_collector_messages ...'
      end
      # verify the required parameter 'collector_id' is set
      if @api_client.config.client_side_validation && collector_id.nil?
        fail ArgumentError, "Missing the required parameter 'collector_id' when calling CollectorsAndInviteMessagesApi.get_collector_messages"
      end
      # resource path
      local_var_path = '/v3/collectors/{COLLECTOR_ID}/messages'.sub('{' + 'COLLECTOR_ID' + '}', collector_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectorsAndInviteMessagesApi#get_collector_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get survey collectors
    # Get a list of collectors for a given survey
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_survey_collectors(opts = {})
      get_survey_collectors_with_http_info(opts)
      nil
    end

    # Get survey collectors
    # Get a list of collectors for a given survey
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_survey_collectors_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectorsAndInviteMessagesApi.get_survey_collectors ...'
      end
      # resource path
      local_var_path = '/v3/surveys/310099766/collectors'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectorsAndInviteMessagesApi#get_survey_collectors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Modify a collector
    # Modify a collector
    # @param collector_id
    # @param [Hash] opts the optional parameters
    # @option opts [CollectorsCOLLECTORIDBody1] :body
    # @return [nil]
    def modify_a_collector(collector_id, opts = {})
      modify_a_collector_with_http_info(collector_id, opts)
      nil
    end

    # Modify a collector
    # Modify a collector
    # @param collector_id
    # @param [Hash] opts the optional parameters
    # @option opts [CollectorsCOLLECTORIDBody1] :body
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def modify_a_collector_with_http_info(collector_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectorsAndInviteMessagesApi.modify_a_collector ...'
      end
      # verify the required parameter 'collector_id' is set
      if @api_client.config.client_side_validation && collector_id.nil?
        fail ArgumentError, "Missing the required parameter 'collector_id' when calling CollectorsAndInviteMessagesApi.modify_a_collector"
      end
      # resource path
      local_var_path = '/v3/collectors/{COLLECTOR_ID}'.sub('{' + 'COLLECTOR_ID' + '}', collector_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectorsAndInviteMessagesApi#modify_a_collector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Modify a message by id
    # Mofiy a collector message by id
    # @param collector_id
    # @param message_id
    # @param [Hash] opts the optional parameters
    # @option opts [MessagesMESSAGEIDBody1] :body
    # @return [nil]
    def modify_a_message_by_id(collector_id, message_id, opts = {})
      modify_a_message_by_id_with_http_info(collector_id, message_id, opts)
      nil
    end

    # Modify a message by id
    # Mofiy a collector message by id
    # @param collector_id
    # @param message_id
    # @param [Hash] opts the optional parameters
    # @option opts [MessagesMESSAGEIDBody1] :body
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def modify_a_message_by_id_with_http_info(collector_id, message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectorsAndInviteMessagesApi.modify_a_message_by_id ...'
      end
      # verify the required parameter 'collector_id' is set
      if @api_client.config.client_side_validation && collector_id.nil?
        fail ArgumentError, "Missing the required parameter 'collector_id' when calling CollectorsAndInviteMessagesApi.modify_a_message_by_id"
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling CollectorsAndInviteMessagesApi.modify_a_message_by_id"
      end
      # resource path
      local_var_path = '/v3/collectors/{COLLECTOR_ID}/messages/{MESSAGE_ID}/'.sub('{' + 'COLLECTOR_ID' + '}', collector_id.to_s).sub('{' + 'MESSAGE_ID' + '}', message_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectorsAndInviteMessagesApi#modify_a_message_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Replace a collector
    # Replace a collector
    # @param collector_id
    # @param [Hash] opts the optional parameters
    # @option opts [CollectorsCOLLECTORIDBody] :body
    # @return [nil]
    def replace_a_collector(collector_id, opts = {})
      replace_a_collector_with_http_info(collector_id, opts)
      nil
    end

    # Replace a collector
    # Replace a collector
    # @param collector_id
    # @param [Hash] opts the optional parameters
    # @option opts [CollectorsCOLLECTORIDBody] :body
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def replace_a_collector_with_http_info(collector_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectorsAndInviteMessagesApi.replace_a_collector ...'
      end
      # verify the required parameter 'collector_id' is set
      if @api_client.config.client_side_validation && collector_id.nil?
        fail ArgumentError, "Missing the required parameter 'collector_id' when calling CollectorsAndInviteMessagesApi.replace_a_collector"
      end
      # resource path
      local_var_path = '/v3/collectors/{COLLECTOR_ID}'.sub('{' + 'COLLECTOR_ID' + '}', collector_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectorsAndInviteMessagesApi#replace_a_collector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Replace a message
    # Replace a collector message
    # @param collector_id
    # @param message_id
    # @param [Hash] opts the optional parameters
    # @option opts [MessagesMESSAGEIDBody] :body
    # @return [nil]
    def replace_a_message(collector_id, message_id, opts = {})
      replace_a_message_with_http_info(collector_id, message_id, opts)
      nil
    end

    # Replace a message
    # Replace a collector message
    # @param collector_id
    # @param message_id
    # @param [Hash] opts the optional parameters
    # @option opts [MessagesMESSAGEIDBody] :body
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def replace_a_message_with_http_info(collector_id, message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectorsAndInviteMessagesApi.replace_a_message ...'
      end
      # verify the required parameter 'collector_id' is set
      if @api_client.config.client_side_validation && collector_id.nil?
        fail ArgumentError, "Missing the required parameter 'collector_id' when calling CollectorsAndInviteMessagesApi.replace_a_message"
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling CollectorsAndInviteMessagesApi.replace_a_message"
      end
      # resource path
      local_var_path = '/v3/collectors/{COLLECTOR_ID}/messages/{MESSAGE_ID}/'.sub('{' + 'COLLECTOR_ID' + '}', collector_id.to_s).sub('{' + 'MESSAGE_ID' + '}', message_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectorsAndInviteMessagesApi#replace_a_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Send and existing message
    # Send or schedule to send an existing message to all recipients that have not received the message
    # @param collector_id
    # @param message_id
    # @param [Hash] opts the optional parameters
    # @option opts [MESSAGEIDSendBody] :body
    # @return [nil]
    def send_and_existing_message(collector_id, message_id, opts = {})
      send_and_existing_message_with_http_info(collector_id, message_id, opts)
      nil
    end

    # Send and existing message
    # Send or schedule to send an existing message to all recipients that have not received the message
    # @param collector_id
    # @param message_id
    # @param [Hash] opts the optional parameters
    # @option opts [MESSAGEIDSendBody] :body
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def send_and_existing_message_with_http_info(collector_id, message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectorsAndInviteMessagesApi.send_and_existing_message ...'
      end
      # verify the required parameter 'collector_id' is set
      if @api_client.config.client_side_validation && collector_id.nil?
        fail ArgumentError, "Missing the required parameter 'collector_id' when calling CollectorsAndInviteMessagesApi.send_and_existing_message"
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling CollectorsAndInviteMessagesApi.send_and_existing_message"
      end
      # resource path
      local_var_path = '/v3/collectors/{COLLECTOR_ID}/messages/{MESSAGE_ID}/send'.sub('{' + 'COLLECTOR_ID' + '}', collector_id.to_s).sub('{' + 'MESSAGE_ID' + '}', message_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectorsAndInviteMessagesApi#send_and_existing_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
