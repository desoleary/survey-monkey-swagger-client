=begin
#SurveyMonkey API V3

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.27
=end

module SurveyMonkeySwaggerClient
  class ResponseCountsAndTrendsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get rollups for a question
    # Get rollups for a question
    # @param page_id
    # @param question_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_rollups_for_a_question(page_id, question_id, opts = {})
      get_rollups_for_a_question_with_http_info(page_id, question_id, opts)
      nil
    end

    # Get rollups for a question
    # Get rollups for a question
    # @param page_id
    # @param question_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_rollups_for_a_question_with_http_info(page_id, question_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResponseCountsAndTrendsApi.get_rollups_for_a_question ...'
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling ResponseCountsAndTrendsApi.get_rollups_for_a_question"
      end
      # verify the required parameter 'question_id' is set
      if @api_client.config.client_side_validation && question_id.nil?
        fail ArgumentError, "Missing the required parameter 'question_id' when calling ResponseCountsAndTrendsApi.get_rollups_for_a_question"
      end
      # resource path
      local_var_path = '/v3/surveys/310099766/pages/{PAGE_ID}/questions/{QUESTION_ID}/rollups'.sub('{' + 'PAGE_ID' + '}', page_id.to_s).sub('{' + 'QUESTION_ID' + '}', question_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResponseCountsAndTrendsApi#get_rollups_for_a_question\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get rollups for a survey
    # Get rollups for a survey
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_rollups_for_a_survey(opts = {})
      get_rollups_for_a_survey_with_http_info(opts)
      nil
    end

    # Get rollups for a survey
    # Get rollups for a survey
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_rollups_for_a_survey_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResponseCountsAndTrendsApi.get_rollups_for_a_survey ...'
      end
      # resource path
      local_var_path = '/v3/surveys/310099766/rollups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResponseCountsAndTrendsApi#get_rollups_for_a_survey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get rollups for a survey page
    # Get rollups for a survey page
    # @param page_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_rollups_for_a_survey_page(page_id, opts = {})
      get_rollups_for_a_survey_page_with_http_info(page_id, opts)
      nil
    end

    # Get rollups for a survey page
    # Get rollups for a survey page
    # @param page_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_rollups_for_a_survey_page_with_http_info(page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResponseCountsAndTrendsApi.get_rollups_for_a_survey_page ...'
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling ResponseCountsAndTrendsApi.get_rollups_for_a_survey_page"
      end
      # resource path
      local_var_path = '/v3/surveys/310099766/pages/{PAGE_ID}/rollups'.sub('{' + 'PAGE_ID' + '}', page_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResponseCountsAndTrendsApi#get_rollups_for_a_survey_page\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get trends for a question
    # Get trends for a question
    # @param page_id
    # @param question_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_trends_for_a_question(page_id, question_id, opts = {})
      get_trends_for_a_question_with_http_info(page_id, question_id, opts)
      nil
    end

    # Get trends for a question
    # Get trends for a question
    # @param page_id
    # @param question_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_trends_for_a_question_with_http_info(page_id, question_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResponseCountsAndTrendsApi.get_trends_for_a_question ...'
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling ResponseCountsAndTrendsApi.get_trends_for_a_question"
      end
      # verify the required parameter 'question_id' is set
      if @api_client.config.client_side_validation && question_id.nil?
        fail ArgumentError, "Missing the required parameter 'question_id' when calling ResponseCountsAndTrendsApi.get_trends_for_a_question"
      end
      # resource path
      local_var_path = '/v3/surveys/310099766/pages/{PAGE_ID}/questions/{QUESTION_ID}/trends'.sub('{' + 'PAGE_ID' + '}', page_id.to_s).sub('{' + 'QUESTION_ID' + '}', question_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResponseCountsAndTrendsApi#get_trends_for_a_question\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get trends for a survey
    # Get trends for a survey
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_trends_for_a_survey(opts = {})
      get_trends_for_a_survey_with_http_info(opts)
      nil
    end

    # Get trends for a survey
    # Get trends for a survey
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_trends_for_a_survey_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResponseCountsAndTrendsApi.get_trends_for_a_survey ...'
      end
      # resource path
      local_var_path = '/v3/surveys/310099766/trends'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResponseCountsAndTrendsApi#get_trends_for_a_survey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get trends for a survey page
    # Get trends for a survey page
    # @param page_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_trends_for_a_survey_page(page_id, opts = {})
      get_trends_for_a_survey_page_with_http_info(page_id, opts)
      nil
    end

    # Get trends for a survey page
    # Get trends for a survey page
    # @param page_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_trends_for_a_survey_page_with_http_info(page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResponseCountsAndTrendsApi.get_trends_for_a_survey_page ...'
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling ResponseCountsAndTrendsApi.get_trends_for_a_survey_page"
      end
      # resource path
      local_var_path = '/v3/surveys/310099766/pages/{PAGE_ID}/trends'.sub('{' + 'PAGE_ID' + '}', page_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResponseCountsAndTrendsApi#get_trends_for_a_survey_page\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
