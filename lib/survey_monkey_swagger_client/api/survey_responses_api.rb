=begin
#SurveyMonkey API V3

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.27
=end

module SurveyMonkeySwaggerClient
  class SurveyResponsesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a response
    # Create a list of responses
    # @param collector_id
    # @param [Hash] opts the optional parameters
    # @option opts [COLLECTORIDResponsesBody] :body
    # @return [nil]
    def create_a_response(collector_id, opts = {})
      create_a_response_with_http_info(collector_id, opts)
      nil
    end

    # Create a response
    # Create a list of responses
    # @param collector_id
    # @param [Hash] opts the optional parameters
    # @option opts [COLLECTORIDResponsesBody] :body
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_a_response_with_http_info(collector_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveyResponsesApi.create_a_response ...'
      end
      # verify the required parameter 'collector_id' is set
      if @api_client.config.client_side_validation && collector_id.nil?
        fail ArgumentError, "Missing the required parameter 'collector_id' when calling SurveyResponsesApi.create_a_response"
      end
      # resource path
      local_var_path = '/v3/collectors/{COLLECTOR_ID}/responses'.sub('{' + 'COLLECTOR_ID' + '}', collector_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveyResponsesApi#create_a_response\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a response by response id
    # Delete a response by response id
    # @param collector_id
    # @param response_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_a_response_by_response_id(collector_id, response_id, opts = {})
      delete_a_response_by_response_id_with_http_info(collector_id, response_id, opts)
      nil
    end

    # Delete a response by response id
    # Delete a response by response id
    # @param collector_id
    # @param response_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_a_response_by_response_id_with_http_info(collector_id, response_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveyResponsesApi.delete_a_response_by_response_id ...'
      end
      # verify the required parameter 'collector_id' is set
      if @api_client.config.client_side_validation && collector_id.nil?
        fail ArgumentError, "Missing the required parameter 'collector_id' when calling SurveyResponsesApi.delete_a_response_by_response_id"
      end
      # verify the required parameter 'response_id' is set
      if @api_client.config.client_side_validation && response_id.nil?
        fail ArgumentError, "Missing the required parameter 'response_id' when calling SurveyResponsesApi.delete_a_response_by_response_id"
      end
      # resource path
      local_var_path = '/v3/collectors/{COLLECTOR_ID}/responses/{RESPONSE_ID}'.sub('{' + 'COLLECTOR_ID' + '}', collector_id.to_s).sub('{' + 'RESPONSE_ID' + '}', response_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveyResponsesApi#delete_a_response_by_response_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of responses by collector id
    # Get a list of responses by collector id
    # @param collector_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_a_list_of_responses_by_collector_id(collector_id, opts = {})
      get_a_list_of_responses_by_collector_id_with_http_info(collector_id, opts)
      nil
    end

    # Get a list of responses by collector id
    # Get a list of responses by collector id
    # @param collector_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_a_list_of_responses_by_collector_id_with_http_info(collector_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveyResponsesApi.get_a_list_of_responses_by_collector_id ...'
      end
      # verify the required parameter 'collector_id' is set
      if @api_client.config.client_side_validation && collector_id.nil?
        fail ArgumentError, "Missing the required parameter 'collector_id' when calling SurveyResponsesApi.get_a_list_of_responses_by_collector_id"
      end
      # resource path
      local_var_path = '/v3/collectors/{COLLECTOR_ID}/responses'.sub('{' + 'COLLECTOR_ID' + '}', collector_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveyResponsesApi#get_a_list_of_responses_by_collector_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of responses by collector id
    # Get a list of responses by collector id, retrieves a list of full expanded responses, including answers to all questions.
    # @param collector_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_a_list_of_responses_by_collector_id1(collector_id, opts = {})
      get_a_list_of_responses_by_collector_id1_with_http_info(collector_id, opts)
      nil
    end

    # Get a list of responses by collector id
    # Get a list of responses by collector id, retrieves a list of full expanded responses, including answers to all questions.
    # @param collector_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_a_list_of_responses_by_collector_id1_with_http_info(collector_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveyResponsesApi.get_a_list_of_responses_by_collector_id1 ...'
      end
      # verify the required parameter 'collector_id' is set
      if @api_client.config.client_side_validation && collector_id.nil?
        fail ArgumentError, "Missing the required parameter 'collector_id' when calling SurveyResponsesApi.get_a_list_of_responses_by_collector_id1"
      end
      # resource path
      local_var_path = '/v3/collectors/{COLLECTOR_ID}/responses/bulk'.sub('{' + 'COLLECTOR_ID' + '}', collector_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveyResponsesApi#get_a_list_of_responses_by_collector_id1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    #  Get a list of responses by survey id
    # Get a list of responses by survey id, retrieves a list of full expanded responses, including answers to all questions
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_a_list_of_responses_by_survey_id(opts = {})
      get_a_list_of_responses_by_survey_id_with_http_info(opts)
      nil
    end

    #  Get a list of responses by survey id
    # Get a list of responses by survey id, retrieves a list of full expanded responses, including answers to all questions
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_a_list_of_responses_by_survey_id_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveyResponsesApi.get_a_list_of_responses_by_survey_id ...'
      end
      # resource path
      local_var_path = '/v3/surveys/310099766/responses/bulk'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveyResponsesApi#get_a_list_of_responses_by_survey_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get response by collector and response id
    # Get a response resource by response id
    # @param collector_id
    # @param response_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_response_by_collector_and_response_id(collector_id, response_id, opts = {})
      get_response_by_collector_and_response_id_with_http_info(collector_id, response_id, opts)
      nil
    end

    # Get response by collector and response id
    # Get a response resource by response id
    # @param collector_id
    # @param response_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_response_by_collector_and_response_id_with_http_info(collector_id, response_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveyResponsesApi.get_response_by_collector_and_response_id ...'
      end
      # verify the required parameter 'collector_id' is set
      if @api_client.config.client_side_validation && collector_id.nil?
        fail ArgumentError, "Missing the required parameter 'collector_id' when calling SurveyResponsesApi.get_response_by_collector_and_response_id"
      end
      # verify the required parameter 'response_id' is set
      if @api_client.config.client_side_validation && response_id.nil?
        fail ArgumentError, "Missing the required parameter 'response_id' when calling SurveyResponsesApi.get_response_by_collector_and_response_id"
      end
      # resource path
      local_var_path = '/v3/collectors/{COLLECTOR_ID}/responses/{RESPONSE_ID}'.sub('{' + 'COLLECTOR_ID' + '}', collector_id.to_s).sub('{' + 'RESPONSE_ID' + '}', response_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveyResponsesApi#get_response_by_collector_and_response_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get response by survey and response id
    # Get a response resource by response id
    # @param response_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_response_by_survey_and_response_id(response_id, opts = {})
      get_response_by_survey_and_response_id_with_http_info(response_id, opts)
      nil
    end

    # Get response by survey and response id
    # Get a response resource by response id
    # @param response_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_response_by_survey_and_response_id_with_http_info(response_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveyResponsesApi.get_response_by_survey_and_response_id ...'
      end
      # verify the required parameter 'response_id' is set
      if @api_client.config.client_side_validation && response_id.nil?
        fail ArgumentError, "Missing the required parameter 'response_id' when calling SurveyResponsesApi.get_response_by_survey_and_response_id"
      end
      # resource path
      local_var_path = '/v3/survey/310099766/responses/{RESPONSE_ID}'.sub('{' + 'RESPONSE_ID' + '}', response_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveyResponsesApi#get_response_by_survey_and_response_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get response details
    # Get a response details by response id
    # @param collector_id
    # @param response_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_response_details(collector_id, response_id, opts = {})
      get_response_details_with_http_info(collector_id, response_id, opts)
      nil
    end

    # Get response details
    # Get a response details by response id
    # @param collector_id
    # @param response_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_response_details_with_http_info(collector_id, response_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveyResponsesApi.get_response_details ...'
      end
      # verify the required parameter 'collector_id' is set
      if @api_client.config.client_side_validation && collector_id.nil?
        fail ArgumentError, "Missing the required parameter 'collector_id' when calling SurveyResponsesApi.get_response_details"
      end
      # verify the required parameter 'response_id' is set
      if @api_client.config.client_side_validation && response_id.nil?
        fail ArgumentError, "Missing the required parameter 'response_id' when calling SurveyResponsesApi.get_response_details"
      end
      # resource path
      local_var_path = '/v3/collectors/{COLLECTOR_ID}/responses/{RESPONSE_ID}/details'.sub('{' + 'COLLECTOR_ID' + '}', collector_id.to_s).sub('{' + 'RESPONSE_ID' + '}', response_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveyResponsesApi#get_response_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Modify a response by response id
    # Modify a response by response id
    # @param collector_id
    # @param response_id
    # @param [Hash] opts the optional parameters
    # @option opts [ResponsesRESPONSEIDBody1] :body
    # @return [nil]
    def modify_a_response_by_response_id(collector_id, response_id, opts = {})
      modify_a_response_by_response_id_with_http_info(collector_id, response_id, opts)
      nil
    end

    # Modify a response by response id
    # Modify a response by response id
    # @param collector_id
    # @param response_id
    # @param [Hash] opts the optional parameters
    # @option opts [ResponsesRESPONSEIDBody1] :body
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def modify_a_response_by_response_id_with_http_info(collector_id, response_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveyResponsesApi.modify_a_response_by_response_id ...'
      end
      # verify the required parameter 'collector_id' is set
      if @api_client.config.client_side_validation && collector_id.nil?
        fail ArgumentError, "Missing the required parameter 'collector_id' when calling SurveyResponsesApi.modify_a_response_by_response_id"
      end
      # verify the required parameter 'response_id' is set
      if @api_client.config.client_side_validation && response_id.nil?
        fail ArgumentError, "Missing the required parameter 'response_id' when calling SurveyResponsesApi.modify_a_response_by_response_id"
      end
      # resource path
      local_var_path = '/v3/collectors/{COLLECTOR_ID}/responses/{RESPONSE_ID}'.sub('{' + 'COLLECTOR_ID' + '}', collector_id.to_s).sub('{' + 'RESPONSE_ID' + '}', response_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveyResponsesApi#modify_a_response_by_response_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Replace a response by response id
    # Replace a response by response id
    # @param collector_id
    # @param response_id
    # @param [Hash] opts the optional parameters
    # @option opts [ResponsesRESPONSEIDBody] :body
    # @return [nil]
    def replace_a_response_by_response_id(collector_id, response_id, opts = {})
      replace_a_response_by_response_id_with_http_info(collector_id, response_id, opts)
      nil
    end

    # Replace a response by response id
    # Replace a response by response id
    # @param collector_id
    # @param response_id
    # @param [Hash] opts the optional parameters
    # @option opts [ResponsesRESPONSEIDBody] :body
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def replace_a_response_by_response_id_with_http_info(collector_id, response_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveyResponsesApi.replace_a_response_by_response_id ...'
      end
      # verify the required parameter 'collector_id' is set
      if @api_client.config.client_side_validation && collector_id.nil?
        fail ArgumentError, "Missing the required parameter 'collector_id' when calling SurveyResponsesApi.replace_a_response_by_response_id"
      end
      # verify the required parameter 'response_id' is set
      if @api_client.config.client_side_validation && response_id.nil?
        fail ArgumentError, "Missing the required parameter 'response_id' when calling SurveyResponsesApi.replace_a_response_by_response_id"
      end
      # resource path
      local_var_path = '/v3/collectors/{COLLECTOR_ID}/responses/{RESPONSE_ID}'.sub('{' + 'COLLECTOR_ID' + '}', collector_id.to_s).sub('{' + 'RESPONSE_ID' + '}', response_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveyResponsesApi#replace_a_response_by_response_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
