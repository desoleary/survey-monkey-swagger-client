=begin
#SurveyMonkey API V3 

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.27
=end

module SurveyMonkeySwaggerClient
  class ContactsAndContactListsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a contact list
    # Creates a contact list, contacts can be sent survey invite messages using an email invite collector
    # @param [Hash] opts the optional parameters
    # @option opts [V3ContactListsBody] :body 
    # @return [nil]
    def create_a_contact_list(opts = {})
      create_a_contact_list_with_http_info(opts)
      nil
    end

    # Create a contact list
    # Creates a contact list, contacts can be sent survey invite messages using an email invite collector
    # @param [Hash] opts the optional parameters
    # @option opts [V3ContactListsBody] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_a_contact_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsAndContactListsApi.create_a_contact_list ...'
      end
      # resource path
      local_var_path = '/v3/contact_lists'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsAndContactListsApi#create_a_contact_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new contact
    # Create a new contact, contacts can be sent survey invite messages using an email invite collector
    # @param [Hash] opts the optional parameters
    # @option opts [V3ContactsBody] :body 
    # @return [nil]
    def create_a_new_contact(opts = {})
      create_a_new_contact_with_http_info(opts)
      nil
    end

    # Create a new contact
    # Create a new contact, contacts can be sent survey invite messages using an email invite collector
    # @param [Hash] opts the optional parameters
    # @option opts [V3ContactsBody] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_a_new_contact_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsAndContactListsApi.create_a_new_contact ...'
      end
      # resource path
      local_var_path = '/v3/contacts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsAndContactListsApi#create_a_new_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create multiple contacts
    # Creates multiple contacts, contacts can be sent survey invite messages using an email invite collector
    # @param [Hash] opts the optional parameters
    # @option opts [ContactsBulkBody1] :body 
    # @return [nil]
    def create_multiple_contacts(opts = {})
      create_multiple_contacts_with_http_info(opts)
      nil
    end

    # Create multiple contacts
    # Creates multiple contacts, contacts can be sent survey invite messages using an email invite collector
    # @param [Hash] opts the optional parameters
    # @option opts [ContactsBulkBody1] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_multiple_contacts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsAndContactListsApi.create_multiple_contacts ...'
      end
      # resource path
      local_var_path = '/v3/contacts/bulk'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsAndContactListsApi#create_multiple_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create multiple contacts under contact list
    # Creates multiple contacts and adds them to a list, contacts can be sent survey invite messages using an email invite collector.
    # @param contact_list_id 
    # @param [Hash] opts the optional parameters
    # @option opts [ContactsBulkBody] :body 
    # @return [nil]
    def create_multiple_contacts_under_contact_list(contact_list_id, opts = {})
      create_multiple_contacts_under_contact_list_with_http_info(contact_list_id, opts)
      nil
    end

    # Create multiple contacts under contact list
    # Creates multiple contacts and adds them to a list, contacts can be sent survey invite messages using an email invite collector.
    # @param contact_list_id 
    # @param [Hash] opts the optional parameters
    # @option opts [ContactsBulkBody] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_multiple_contacts_under_contact_list_with_http_info(contact_list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsAndContactListsApi.create_multiple_contacts_under_contact_list ...'
      end
      # verify the required parameter 'contact_list_id' is set
      if @api_client.config.client_side_validation && contact_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_list_id' when calling ContactsAndContactListsApi.create_multiple_contacts_under_contact_list"
      end
      # resource path
      local_var_path = '/v3/contact_lists/{CONTACT_LIST_ID}/contacts/bulk'.sub('{' + 'CONTACT_LIST_ID' + '}', contact_list_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsAndContactListsApi#create_multiple_contacts_under_contact_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a contact
    # Delete a contact
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_a_contact(contact_id, opts = {})
      delete_a_contact_with_http_info(contact_id, opts)
      nil
    end

    # Delete a contact
    # Delete a contact
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_a_contact_with_http_info(contact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsAndContactListsApi.delete_a_contact ...'
      end
      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling ContactsAndContactListsApi.delete_a_contact"
      end
      # resource path
      local_var_path = '/v3/contacts/{CONTACT_ID}'.sub('{' + 'CONTACT_ID' + '}', contact_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsAndContactListsApi#delete_a_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a contact list
    # Delete a contact list
    # @param contact_list_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_a_contact_list(contact_list_id, opts = {})
      delete_a_contact_list_with_http_info(contact_list_id, opts)
      nil
    end

    # Delete a contact list
    # Delete a contact list
    # @param contact_list_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_a_contact_list_with_http_info(contact_list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsAndContactListsApi.delete_a_contact_list ...'
      end
      # verify the required parameter 'contact_list_id' is set
      if @api_client.config.client_side_validation && contact_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_list_id' when calling ContactsAndContactListsApi.delete_a_contact_list"
      end
      # resource path
      local_var_path = '/v3/contact_lists/{CONTACT_LIST_ID}'.sub('{' + 'CONTACT_LIST_ID' + '}', contact_list_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsAndContactListsApi#delete_a_contact_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a contact
    # Get a contact by contact id
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_a_contact(contact_id, opts = {})
      get_a_contact_with_http_info(contact_id, opts)
      nil
    end

    # Get a contact
    # Get a contact by contact id
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_a_contact_with_http_info(contact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsAndContactListsApi.get_a_contact ...'
      end
      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling ContactsAndContactListsApi.get_a_contact"
      end
      # resource path
      local_var_path = '/v3/contacts/{CONTACT_ID}'.sub('{' + 'CONTACT_ID' + '}', contact_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsAndContactListsApi#get_a_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a contact field
    # Get a contact field
    # @param contact_field_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_a_contact_field(contact_field_id, opts = {})
      get_a_contact_field_with_http_info(contact_field_id, opts)
      nil
    end

    # Get a contact field
    # Get a contact field
    # @param contact_field_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_a_contact_field_with_http_info(contact_field_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsAndContactListsApi.get_a_contact_field ...'
      end
      # verify the required parameter 'contact_field_id' is set
      if @api_client.config.client_side_validation && contact_field_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_field_id' when calling ContactsAndContactListsApi.get_a_contact_field"
      end
      # resource path
      local_var_path = '/v3/contact_fields/{CONTACT_FIELD_ID}'.sub('{' + 'CONTACT_FIELD_ID' + '}', contact_field_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsAndContactListsApi#get_a_contact_field\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a contact list
    # Get a contact list by contact list id
    # @param contact_list_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_a_contact_list(contact_list_id, opts = {})
      get_a_contact_list_with_http_info(contact_list_id, opts)
      nil
    end

    # Get a contact list
    # Get a contact list by contact list id
    # @param contact_list_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_a_contact_list_with_http_info(contact_list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsAndContactListsApi.get_a_contact_list ...'
      end
      # verify the required parameter 'contact_list_id' is set
      if @api_client.config.client_side_validation && contact_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_list_id' when calling ContactsAndContactListsApi.get_a_contact_list"
      end
      # resource path
      local_var_path = '/v3/contact_lists/{CONTACT_LIST_ID}'.sub('{' + 'CONTACT_LIST_ID' + '}', contact_list_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsAndContactListsApi#get_a_contact_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of contact fields
    # Get a list of contact fields
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_a_list_of_contact_fields(opts = {})
      get_a_list_of_contact_fields_with_http_info(opts)
      nil
    end

    # Get a list of contact fields
    # Get a list of contact fields
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_a_list_of_contact_fields_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsAndContactListsApi.get_a_list_of_contact_fields ...'
      end
      # resource path
      local_var_path = '/v3/contact_fields'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsAndContactListsApi#get_a_list_of_contact_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all Contact List
    # Get all contact lists
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_all_contact_list(opts = {})
      get_all_contact_list_with_http_info(opts)
      nil
    end

    # Get all Contact List
    # Get all contact lists
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_all_contact_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsAndContactListsApi.get_all_contact_list ...'
      end
      # resource path
      local_var_path = '/v3/contact_lists'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsAndContactListsApi#get_all_contact_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all contacts
    # Get a list of all contacts
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_all_contacts(opts = {})
      get_all_contacts_with_http_info(opts)
      nil
    end

    # Get all contacts
    # Get a list of all contacts
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_all_contacts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsAndContactListsApi.get_all_contacts ...'
      end
      # resource path
      local_var_path = '/v3/contacts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsAndContactListsApi#get_all_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all contacts under contact list
    # Get all contacts in a contact list
    # @param contact_list_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_all_contacts_under_contact_list(contact_list_id, opts = {})
      get_all_contacts_under_contact_list_with_http_info(contact_list_id, opts)
      nil
    end

    # Get all contacts under contact list
    # Get all contacts in a contact list
    # @param contact_list_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_all_contacts_under_contact_list_with_http_info(contact_list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsAndContactListsApi.get_all_contacts_under_contact_list ...'
      end
      # verify the required parameter 'contact_list_id' is set
      if @api_client.config.client_side_validation && contact_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_list_id' when calling ContactsAndContactListsApi.get_all_contacts_under_contact_list"
      end
      # resource path
      local_var_path = '/v3/contact_lists/{CONTACT_LIST_ID}/contacts'.sub('{' + 'CONTACT_LIST_ID' + '}', contact_list_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsAndContactListsApi#get_all_contacts_under_contact_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Merge contact list
    # Copies contacts in the list specified in the request body and adds to the list specified in the resource URL
    # @param contact_list_id 
    # @param [Hash] opts the optional parameters
    # @option opts [CONTACTLISTIDCopyBody] :body 
    # @return [nil]
    def merge_contact_list(contact_list_id, opts = {})
      merge_contact_list_with_http_info(contact_list_id, opts)
      nil
    end

    # Merge contact list
    # Copies contacts in the list specified in the request body and adds to the list specified in the resource URL
    # @param contact_list_id 
    # @param [Hash] opts the optional parameters
    # @option opts [CONTACTLISTIDCopyBody] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def merge_contact_list_with_http_info(contact_list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsAndContactListsApi.merge_contact_list ...'
      end
      # verify the required parameter 'contact_list_id' is set
      if @api_client.config.client_side_validation && contact_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_list_id' when calling ContactsAndContactListsApi.merge_contact_list"
      end
      # resource path
      local_var_path = '/v3/contact_lists/{CONTACT_LIST_ID}/copy'.sub('{' + 'CONTACT_LIST_ID' + '}', contact_list_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsAndContactListsApi#merge_contact_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Modify a contact
    # Modify a contact
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @option opts [ContactsCONTACTIDBody] :body 
    # @return [nil]
    def modify_a_contact(contact_id, opts = {})
      modify_a_contact_with_http_info(contact_id, opts)
      nil
    end

    # Modify a contact
    # Modify a contact
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @option opts [ContactsCONTACTIDBody] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def modify_a_contact_with_http_info(contact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsAndContactListsApi.modify_a_contact ...'
      end
      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling ContactsAndContactListsApi.modify_a_contact"
      end
      # resource path
      local_var_path = '/v3/contacts/{CONTACT_ID}'.sub('{' + 'CONTACT_ID' + '}', contact_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsAndContactListsApi#modify_a_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Modify a contact field
    # Modify a contact field
    # @param contact_field_id 
    # @param [Hash] opts the optional parameters
    # @option opts [ContactFieldsCONTACTFIELDIDBody] :body 
    # @return [nil]
    def modify_a_contact_field(contact_field_id, opts = {})
      modify_a_contact_field_with_http_info(contact_field_id, opts)
      nil
    end

    # Modify a contact field
    # Modify a contact field
    # @param contact_field_id 
    # @param [Hash] opts the optional parameters
    # @option opts [ContactFieldsCONTACTFIELDIDBody] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def modify_a_contact_field_with_http_info(contact_field_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsAndContactListsApi.modify_a_contact_field ...'
      end
      # verify the required parameter 'contact_field_id' is set
      if @api_client.config.client_side_validation && contact_field_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_field_id' when calling ContactsAndContactListsApi.modify_a_contact_field"
      end
      # resource path
      local_var_path = '/v3/contact_fields/{CONTACT_FIELD_ID}'.sub('{' + 'CONTACT_FIELD_ID' + '}', contact_field_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsAndContactListsApi#modify_a_contact_field\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Modify a contact list
    # Modify a contact list
    # @param contact_list_id 
    # @param [Hash] opts the optional parameters
    # @option opts [ContactListsCONTACTLISTIDBody1] :body 
    # @return [nil]
    def modify_a_contact_list(contact_list_id, opts = {})
      modify_a_contact_list_with_http_info(contact_list_id, opts)
      nil
    end

    # Modify a contact list
    # Modify a contact list
    # @param contact_list_id 
    # @param [Hash] opts the optional parameters
    # @option opts [ContactListsCONTACTLISTIDBody1] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def modify_a_contact_list_with_http_info(contact_list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsAndContactListsApi.modify_a_contact_list ...'
      end
      # verify the required parameter 'contact_list_id' is set
      if @api_client.config.client_side_validation && contact_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_list_id' when calling ContactsAndContactListsApi.modify_a_contact_list"
      end
      # resource path
      local_var_path = '/v3/contact_lists/{CONTACT_LIST_ID}'.sub('{' + 'CONTACT_LIST_ID' + '}', contact_list_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsAndContactListsApi#modify_a_contact_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Replace a contact
    # Replace a contact
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @option opts [ContactsCONTACTIDBody1] :body 
    # @return [nil]
    def replace_a_contact(contact_id, opts = {})
      replace_a_contact_with_http_info(contact_id, opts)
      nil
    end

    # Replace a contact
    # Replace a contact
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @option opts [ContactsCONTACTIDBody1] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def replace_a_contact_with_http_info(contact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsAndContactListsApi.replace_a_contact ...'
      end
      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling ContactsAndContactListsApi.replace_a_contact"
      end
      # resource path
      local_var_path = '/v3/contacts/{CONTACT_ID}/'.sub('{' + 'CONTACT_ID' + '}', contact_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsAndContactListsApi#replace_a_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Replace a contact list
    # Replace a contact list
    # @param contact_list_id 
    # @param [Hash] opts the optional parameters
    # @option opts [ContactListsCONTACTLISTIDBody] :body 
    # @return [nil]
    def replace_a_contact_list(contact_list_id, opts = {})
      replace_a_contact_list_with_http_info(contact_list_id, opts)
      nil
    end

    # Replace a contact list
    # Replace a contact list
    # @param contact_list_id 
    # @param [Hash] opts the optional parameters
    # @option opts [ContactListsCONTACTLISTIDBody] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def replace_a_contact_list_with_http_info(contact_list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsAndContactListsApi.replace_a_contact_list ...'
      end
      # verify the required parameter 'contact_list_id' is set
      if @api_client.config.client_side_validation && contact_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_list_id' when calling ContactsAndContactListsApi.replace_a_contact_list"
      end
      # resource path
      local_var_path = '/v3/contact_lists/{CONTACT_LIST_ID}'.sub('{' + 'CONTACT_LIST_ID' + '}', contact_list_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsAndContactListsApi#replace_a_contact_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
