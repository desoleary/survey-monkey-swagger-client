=begin
#SurveyMonkey API V3

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.27
=end

module SurveyMonkeySwaggerClient
  class SurveysPagesAndQuestionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a question
    # Create a new question on a survey page
    # @param page_id
    # @param [Hash] opts the optional parameters
    # @option opts [PAGEIDQuestionsBody] :body
    # @return [nil]
    def create_a_question(page_id, opts = {})
      create_a_question_with_http_info(page_id, opts)
      nil
    end

    # Create a question
    # Create a new question on a survey page
    # @param page_id
    # @param [Hash] opts the optional parameters
    # @option opts [PAGEIDQuestionsBody] :body
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_a_question_with_http_info(page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveysPagesAndQuestionsApi.create_a_question ...'
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling SurveysPagesAndQuestionsApi.create_a_question"
      end
      # resource path
      local_var_path = '/v3/surveys/310099766/pages/{PAGE_ID}/questions'.sub('{' + 'PAGE_ID' + '}', page_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysPagesAndQuestionsApi#create_a_question\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a survey
    # Create a new empty survey, if a template id or an existing survey id is specified, a survey prepopulated with pages and questions
    # @param [Hash] opts the optional parameters
    # @option opts [V3SurveysBody] :body
    # @return [InlineResponse201]
    def create_a_survey(opts = {})
      data, _status_code, _headers = create_a_survey_with_http_info(opts)
      data
    end

    # Create a survey
    # Create a new empty survey, if a template id or an existing survey id is specified, a survey prepopulated with pages and questions
    # @param [Hash] opts the optional parameters
    # @option opts [V3SurveysBody] :body
    # @return [Array<(InlineResponse201, Integer, Hash)>] InlineResponse201 data, response status code and response headers
    def create_a_survey_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveysPagesAndQuestionsApi.create_a_survey ...'
      end
      # resource path
      local_var_path = '/v3/surveys'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type] || 'InlineResponse201'

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysPagesAndQuestionsApi#create_a_survey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a survey pages
    # Create a new empty page
    # @param [Hash] opts the optional parameters
    # @option opts [Model310099766PagesBody] :body
    # @return [nil]
    def create_a_survey_pages(opts = {})
      create_a_survey_pages_with_http_info(opts)
      nil
    end

    # Create a survey pages
    # Create a new empty page
    # @param [Hash] opts the optional parameters
    # @option opts [Model310099766PagesBody] :body
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_a_survey_pages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveysPagesAndQuestionsApi.create_a_survey_pages ...'
      end
      # resource path
      local_var_path = '/v3/surveys/310099766/pages'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysPagesAndQuestionsApi#create_a_survey_pages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a page
    # Delete a page
    # @param page_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_a_page(page_id, opts = {})
      delete_a_page_with_http_info(page_id, opts)
      nil
    end

    # Delete a page
    # Delete a page
    # @param page_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_a_page_with_http_info(page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveysPagesAndQuestionsApi.delete_a_page ...'
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling SurveysPagesAndQuestionsApi.delete_a_page"
      end
      # resource path
      local_var_path = '/v3/surveys/310099766/pages/{PAGE_ID}'.sub('{' + 'PAGE_ID' + '}', page_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysPagesAndQuestionsApi#delete_a_page\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a question
    # Delete a question
    # @param page_id
    # @param question_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_a_question(page_id, question_id, opts = {})
      delete_a_question_with_http_info(page_id, question_id, opts)
      nil
    end

    # Delete a question
    # Delete a question
    # @param page_id
    # @param question_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_a_question_with_http_info(page_id, question_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveysPagesAndQuestionsApi.delete_a_question ...'
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling SurveysPagesAndQuestionsApi.delete_a_question"
      end
      # verify the required parameter 'question_id' is set
      if @api_client.config.client_side_validation && question_id.nil?
        fail ArgumentError, "Missing the required parameter 'question_id' when calling SurveysPagesAndQuestionsApi.delete_a_question"
      end
      # resource path
      local_var_path = '/v3/surveys/310099766/pages/{PAGE_ID}/questions/{QUESTION_ID}'.sub('{' + 'PAGE_ID' + '}', page_id.to_s).sub('{' + 'QUESTION_ID' + '}', question_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysPagesAndQuestionsApi#delete_a_question\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a survey
    # Delete a survey
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_a_survey(opts = {})
      delete_a_survey_with_http_info(opts)
      nil
    end

    # Delete a survey
    # Delete a survey
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_a_survey_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveysPagesAndQuestionsApi.delete_a_survey ...'
      end
      # resource path
      local_var_path = '/v3/surveys/310099766'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysPagesAndQuestionsApi#delete_a_survey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a page detail
    # Get a page's details
    # @param page_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_a_page_detail(page_id, opts = {})
      get_a_page_detail_with_http_info(page_id, opts)
      nil
    end

    # Get a page detail
    # Get a page&#x27;s details
    # @param page_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_a_page_detail_with_http_info(page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveysPagesAndQuestionsApi.get_a_page_detail ...'
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling SurveysPagesAndQuestionsApi.get_a_page_detail"
      end
      # resource path
      local_var_path = '/v3/surveys/310099766/pages/{PAGE_ID}'.sub('{' + 'PAGE_ID' + '}', page_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysPagesAndQuestionsApi#get_a_page_detail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a question detail
    # Get a question's details
    # @param page_id
    # @param question_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_a_question_detail(page_id, question_id, opts = {})
      get_a_question_detail_with_http_info(page_id, question_id, opts)
      nil
    end

    # Get a question detail
    # Get a question&#x27;s details
    # @param page_id
    # @param question_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_a_question_detail_with_http_info(page_id, question_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveysPagesAndQuestionsApi.get_a_question_detail ...'
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling SurveysPagesAndQuestionsApi.get_a_question_detail"
      end
      # verify the required parameter 'question_id' is set
      if @api_client.config.client_side_validation && question_id.nil?
        fail ArgumentError, "Missing the required parameter 'question_id' when calling SurveysPagesAndQuestionsApi.get_a_question_detail"
      end
      # resource path
      local_var_path = '/v3/surveys/310099766/pages/{PAGE_ID}/questions/{QUESTION_ID}'.sub('{' + 'PAGE_ID' + '}', page_id.to_s).sub('{' + 'QUESTION_ID' + '}', question_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysPagesAndQuestionsApi#get_a_question_detail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a survey
    # Returns a survey's details. To get an expanded version showing all pages and questions use /surveys/{survey_id}/details
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_a_survey(opts = {})
      get_a_survey_with_http_info(opts)
      nil
    end

    # Get a survey
    # Returns a survey&#x27;s details. To get an expanded version showing all pages and questions use /surveys/{survey_id}/details
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_a_survey_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveysPagesAndQuestionsApi.get_a_survey ...'
      end
      # resource path
      local_var_path = '/v3/surveys/310099766'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysPagesAndQuestionsApi#get_a_survey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a survey details
    #  Return an expanded survey resource with a pages element containing a list of all page objects, each containing a list of questions objects
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_a_survey_details(opts = {})
      get_a_survey_details_with_http_info(opts)
      nil
    end

    # Get a survey details
    #  Return an expanded survey resource with a pages element containing a list of all page objects, each containing a list of questions objects
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_a_survey_details_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveysPagesAndQuestionsApi.get_a_survey_details ...'
      end
      # resource path
      local_var_path = '/v3/surveys/310099766/details'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysPagesAndQuestionsApi#get_a_survey_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of questions
    # Get a list of questions on a survey page
    # @param page_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_list_of_questions(page_id, opts = {})
      get_list_of_questions_with_http_info(page_id, opts)
      nil
    end

    # Get list of questions
    # Get a list of questions on a survey page
    # @param page_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_list_of_questions_with_http_info(page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveysPagesAndQuestionsApi.get_list_of_questions ...'
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling SurveysPagesAndQuestionsApi.get_list_of_questions"
      end
      # resource path
      local_var_path = '/v3/surveys/310099766/pages/{PAGE_ID}/questions'.sub('{' + 'PAGE_ID' + '}', page_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysPagesAndQuestionsApi#get_list_of_questions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get survey categories
    # Get a list of survey categories that can be used to filter survey templates
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_survey_categories(opts = {})
      get_survey_categories_with_http_info(opts)
      nil
    end

    # Get survey categories
    # Get a list of survey categories that can be used to filter survey templates
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_survey_categories_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveysPagesAndQuestionsApi.get_survey_categories ...'
      end
      # resource path
      local_var_path = '/v3/survey_categories'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysPagesAndQuestionsApi#get_survey_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get survey pages
    # Get a list of survey pages
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_survey_pages(opts = {})
      get_survey_pages_with_http_info(opts)
      nil
    end

    # Get survey pages
    # Get a list of survey pages
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_survey_pages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveysPagesAndQuestionsApi.get_survey_pages ...'
      end
      # resource path
      local_var_path = '/v3/surveys/310099766/pages'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysPagesAndQuestionsApi#get_survey_pages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get survey template
    # Get a list of survey templates. Survey template ids can be used as an argument to POST a new survey
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200]
    def get_survey_template(opts = {})
      data, _status_code, _headers = get_survey_template_with_http_info(opts)
      data
    end

    # Get survey template
    # Get a list of survey templates. Survey template ids can be used as an argument to POST a new survey
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200, Integer, Hash)>] InlineResponse200 data, response status code and response headers
    def get_survey_template_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveysPagesAndQuestionsApi.get_survey_template ...'
      end
      # resource path
      local_var_path = '/v3/survey_templates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200'

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysPagesAndQuestionsApi#get_survey_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get surveys
    # Return a list of surveys owned or shared with the authenticated user
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_surveys(opts = {})
      get_surveys_with_http_info(opts)
      nil
    end

    # Get surveys
    # Return a list of surveys owned or shared with the authenticated user
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_surveys_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveysPagesAndQuestionsApi.get_surveys ...'
      end
      # resource path
      local_var_path = '/v3/surveys'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysPagesAndQuestionsApi#get_surveys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Modify a page
    # Modify a page
    # @param page_id
    # @param [Hash] opts the optional parameters
    # @option opts [PagesPAGEIDBody1] :body
    # @return [nil]
    def modify_a_page(page_id, opts = {})
      modify_a_page_with_http_info(page_id, opts)
      nil
    end

    # Modify a page
    # Modify a page
    # @param page_id
    # @param [Hash] opts the optional parameters
    # @option opts [PagesPAGEIDBody1] :body
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def modify_a_page_with_http_info(page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveysPagesAndQuestionsApi.modify_a_page ...'
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling SurveysPagesAndQuestionsApi.modify_a_page"
      end
      # resource path
      local_var_path = '/v3/surveys/310099766/pages/{PAGE_ID}'.sub('{' + 'PAGE_ID' + '}', page_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysPagesAndQuestionsApi#modify_a_page\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Modify a survey
    # Modifies a survey’s title or language
    # @param [Hash] opts the optional parameters
    # @option opts [Surveys310099766Body1] :body
    # @return [nil]
    def modify_a_survey(opts = {})
      modify_a_survey_with_http_info(opts)
      nil
    end

    # Modify a survey
    # Modifies a survey’s title or language
    # @param [Hash] opts the optional parameters
    # @option opts [Surveys310099766Body1] :body
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def modify_a_survey_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveysPagesAndQuestionsApi.modify_a_survey ...'
      end
      # resource path
      local_var_path = '/v3/surveys/310099766'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysPagesAndQuestionsApi#modify_a_survey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Replace a page
    # Replace a page
    # @param page_id
    # @param [Hash] opts the optional parameters
    # @option opts [PagesPAGEIDBody] :body
    # @return [nil]
    def replace_a_page(page_id, opts = {})
      replace_a_page_with_http_info(page_id, opts)
      nil
    end

    # Replace a page
    # Replace a page
    # @param page_id
    # @param [Hash] opts the optional parameters
    # @option opts [PagesPAGEIDBody] :body
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def replace_a_page_with_http_info(page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveysPagesAndQuestionsApi.replace_a_page ...'
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling SurveysPagesAndQuestionsApi.replace_a_page"
      end
      # resource path
      local_var_path = '/v3/surveys/310099766/pages/{PAGE_ID}'.sub('{' + 'PAGE_ID' + '}', page_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysPagesAndQuestionsApi#replace_a_page\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Replace a question
    # Replace a question
    # @param page_id
    # @param question_id
    # @param [Hash] opts the optional parameters
    # @option opts [QuestionsQUESTIONIDBody] :body
    # @return [nil]
    def replace_a_question(page_id, question_id, opts = {})
      replace_a_question_with_http_info(page_id, question_id, opts)
      nil
    end

    # Replace a question
    # Replace a question
    # @param page_id
    # @param question_id
    # @param [Hash] opts the optional parameters
    # @option opts [QuestionsQUESTIONIDBody] :body
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def replace_a_question_with_http_info(page_id, question_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveysPagesAndQuestionsApi.replace_a_question ...'
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling SurveysPagesAndQuestionsApi.replace_a_question"
      end
      # verify the required parameter 'question_id' is set
      if @api_client.config.client_side_validation && question_id.nil?
        fail ArgumentError, "Missing the required parameter 'question_id' when calling SurveysPagesAndQuestionsApi.replace_a_question"
      end
      # resource path
      local_var_path = '/v3/surveys/310099766/pages/{PAGE_ID}/questions/{QUESTION_ID}'.sub('{' + 'PAGE_ID' + '}', page_id.to_s).sub('{' + 'QUESTION_ID' + '}', question_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysPagesAndQuestionsApi#replace_a_question\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Replace a survey
    # Replace a survey
    # @param [Hash] opts the optional parameters
    # @option opts [Surveys310099766Body] :body
    # @return [nil]
    def replace_a_survey(opts = {})
      replace_a_survey_with_http_info(opts)
      nil
    end

    # Replace a survey
    # Replace a survey
    # @param [Hash] opts the optional parameters
    # @option opts [Surveys310099766Body] :body
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def replace_a_survey_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveysPagesAndQuestionsApi.replace_a_survey ...'
      end
      # resource path
      local_var_path = '/v3/surveys/310099766'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysPagesAndQuestionsApi#replace_a_survey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a question
    # Updates a question
    # @param page_id
    # @param question_id
    # @param [Hash] opts the optional parameters
    # @option opts [QuestionsQUESTIONIDBody1] :body
    # @return [nil]
    def update_a_question(page_id, question_id, opts = {})
      update_a_question_with_http_info(page_id, question_id, opts)
      nil
    end

    # Update a question
    # Updates a question
    # @param page_id
    # @param question_id
    # @param [Hash] opts the optional parameters
    # @option opts [QuestionsQUESTIONIDBody1] :body
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_a_question_with_http_info(page_id, question_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveysPagesAndQuestionsApi.update_a_question ...'
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling SurveysPagesAndQuestionsApi.update_a_question"
      end
      # verify the required parameter 'question_id' is set
      if @api_client.config.client_side_validation && question_id.nil?
        fail ArgumentError, "Missing the required parameter 'question_id' when calling SurveysPagesAndQuestionsApi.update_a_question"
      end
      # resource path
      local_var_path = '/v3/surveys/310099766/pages/{PAGE_ID}/questions/{QUESTION_ID}'.sub('{' + 'PAGE_ID' + '}', page_id.to_s).sub('{' + 'QUESTION_ID' + '}', question_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysPagesAndQuestionsApi#update_a_question\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
