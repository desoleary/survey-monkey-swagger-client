=begin
#SurveyMonkey API V3 

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.27
=end

require 'date'

module SurveyMonkeySwaggerClient
  class InlineResponse201
    attr_accessor :analyze_url

    attr_accessor :buttons_text

    attr_accessor :category

    attr_accessor :collect_url

    attr_accessor :custom_variables

    attr_accessor :date_created

    attr_accessor :date_modified

    attr_accessor :edit_url

    attr_accessor :folder_id

    attr_accessor :footer

    attr_accessor :href

    attr_accessor :id

    attr_accessor :is_owner

    attr_accessor :language

    attr_accessor :nickname

    attr_accessor :page_count

    attr_accessor :preview

    attr_accessor :question_count

    attr_accessor :response_count

    attr_accessor :summary_url

    attr_accessor :title

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'analyze_url' => :'analyze_url',
        :'buttons_text' => :'buttons_text',
        :'category' => :'category',
        :'collect_url' => :'collect_url',
        :'custom_variables' => :'custom_variables',
        :'date_created' => :'date_created',
        :'date_modified' => :'date_modified',
        :'edit_url' => :'edit_url',
        :'folder_id' => :'folder_id',
        :'footer' => :'footer',
        :'href' => :'href',
        :'id' => :'id',
        :'is_owner' => :'is_owner',
        :'language' => :'language',
        :'nickname' => :'nickname',
        :'page_count' => :'page_count',
        :'preview' => :'preview',
        :'question_count' => :'question_count',
        :'response_count' => :'response_count',
        :'summary_url' => :'summary_url',
        :'title' => :'title'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'analyze_url' => :'Object',
        :'buttons_text' => :'Object',
        :'category' => :'Object',
        :'collect_url' => :'Object',
        :'custom_variables' => :'Object',
        :'date_created' => :'Object',
        :'date_modified' => :'Object',
        :'edit_url' => :'Object',
        :'folder_id' => :'Object',
        :'footer' => :'Object',
        :'href' => :'Object',
        :'id' => :'Object',
        :'is_owner' => :'Object',
        :'language' => :'Object',
        :'nickname' => :'Object',
        :'page_count' => :'Object',
        :'preview' => :'Object',
        :'question_count' => :'Object',
        :'response_count' => :'Object',
        :'summary_url' => :'Object',
        :'title' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SurveyMonkeySwaggerClient::InlineResponse201` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SurveyMonkeySwaggerClient::InlineResponse201`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'analyze_url')
        self.analyze_url = attributes[:'analyze_url']
      end

      if attributes.key?(:'buttons_text')
        self.buttons_text = attributes[:'buttons_text']
      end

      if attributes.key?(:'category')
        self.category = attributes[:'category']
      end

      if attributes.key?(:'collect_url')
        self.collect_url = attributes[:'collect_url']
      end

      if attributes.key?(:'custom_variables')
        self.custom_variables = attributes[:'custom_variables']
      end

      if attributes.key?(:'date_created')
        self.date_created = attributes[:'date_created']
      end

      if attributes.key?(:'date_modified')
        self.date_modified = attributes[:'date_modified']
      end

      if attributes.key?(:'edit_url')
        self.edit_url = attributes[:'edit_url']
      end

      if attributes.key?(:'folder_id')
        self.folder_id = attributes[:'folder_id']
      end

      if attributes.key?(:'footer')
        self.footer = attributes[:'footer']
      end

      if attributes.key?(:'href')
        self.href = attributes[:'href']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'is_owner')
        self.is_owner = attributes[:'is_owner']
      end

      if attributes.key?(:'language')
        self.language = attributes[:'language']
      end

      if attributes.key?(:'nickname')
        self.nickname = attributes[:'nickname']
      end

      if attributes.key?(:'page_count')
        self.page_count = attributes[:'page_count']
      end

      if attributes.key?(:'preview')
        self.preview = attributes[:'preview']
      end

      if attributes.key?(:'question_count')
        self.question_count = attributes[:'question_count']
      end

      if attributes.key?(:'response_count')
        self.response_count = attributes[:'response_count']
      end

      if attributes.key?(:'summary_url')
        self.summary_url = attributes[:'summary_url']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          analyze_url == o.analyze_url &&
          buttons_text == o.buttons_text &&
          category == o.category &&
          collect_url == o.collect_url &&
          custom_variables == o.custom_variables &&
          date_created == o.date_created &&
          date_modified == o.date_modified &&
          edit_url == o.edit_url &&
          folder_id == o.folder_id &&
          footer == o.footer &&
          href == o.href &&
          id == o.id &&
          is_owner == o.is_owner &&
          language == o.language &&
          nickname == o.nickname &&
          page_count == o.page_count &&
          preview == o.preview &&
          question_count == o.question_count &&
          response_count == o.response_count &&
          summary_url == o.summary_url &&
          title == o.title
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [analyze_url, buttons_text, category, collect_url, custom_variables, date_created, date_modified, edit_url, folder_id, footer, href, id, is_owner, language, nickname, page_count, preview, question_count, response_count, summary_url, title].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SurveyMonkeySwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
